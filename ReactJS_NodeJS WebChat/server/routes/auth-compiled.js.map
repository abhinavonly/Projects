{"version":3,"sources":["auth.js"],"names":[],"mappings":"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","file":"auth-compiled.js","sourcesContent":["'use strict';\nconst express = require('express');\nconst validator = require('validator');\nconst router = express.Router();\nconst passport = require('passport');\n\nrouter.post('/signup',function(req, res, next){\n  let validationResult = validateSignupForm(req.body);\n  if (!validationResult.success) {\n    return res.status(400).json({ success: false, message: validationResult.message, errors: validationResult.errors });\n  }\n  passport.authenticate('local-signup', function(err, info) {\n    if(info==false)\n    {\n      return res.status(409).json({ success: false, message: \"Check the form for errors.\", errors: { email: \"This email is already taken.\" } });\n    }\n    if (err) {\n      return res.status(400).json({ success: false, message: \"Could not process the form.\" });\n    }\n    return res.status(200).json({ success: true, message: 'You have successfully signed up! Now you should be able to log in.' });\n  })(req, res, next);\n\n}) ;\n\nrouter.post('/login', function(req, res, next) {\n  let validationResult = validateLoginForm(req.body);\n  if (!validationResult.success) {\n    return res.status(400).json({ success: false, message: validationResult.message, errors: validationResult.errors });\n  }\n\n  passport.authenticate('local-login', function(err, token, userData) {\n    if(userData==false)\n    {\n      return res.status(409).json({ success: false, message: \"User email or password is not correct.\"});\n    }\n    if (err) {\n      if (err.name === \"IncorrectCredentialsError\") {\n        return res.status(400).json({ success: false, message: err.message });\n      }\n\n      return res.status(400).json({ success: false, message: \"Could not process the form.\" });\n    }\n\n    return res.json({ success: true, message: \"You have successfully logged in!\", token: token, user: userData });\n\n  })(req, res, next);\n});\n\n\n/**\n * Validate the sign up form\n *\n * @param {object} payload - the HTTP body message\n * @returns {object} The result of validation. Object contains a boolean validation result, errors tips, and a global message for a whole form.\n */\nfunction validateSignupForm(payload) {\n  let isFormValid = true;\n  let errors = {};\n  let message = '';\n  if (!payload.useremail || !validator.isEmail(payload.useremail)) {\n    isFormValid = false;\n    errors.email = \"Please provide a correct email address.\";\n  }\n\n  if (!payload.password || !validator.isLength(payload.password, 8)) {\n    isFormValid = false;\n    errors.password = \"Password required and must have at least 8 characters.\";\n  }\n  if (!payload.nickname || payload.nickname.trim().length === 0) {\n    isFormValid = false;\n    errors.name = \"Please provide your nickname.\";\n  }\n\n  if (!validator.equals(payload.password,payload.passwordconfirm)) {\n    isFormValid = false;\n    errors.passwordconfirm = \"Password must match.\";\n  }\n\n  if (!isFormValid) {\n    message = \"Check the form for errors.\";\n  }\n\n  return {\n    success: isFormValid,\n    message: message,\n    errors: errors\n  };\n}\n\n/**\n * Validate the login form\n *\n * @param {object} payload - the HTTP body message\n * @returns {object} The result of validation. Object contains a boolean validation result, errors tips, and a global message for the whole form.\n */\nfunction validateLoginForm(payload) {\n  let isFormValid = true;\n  let errors = {};\n  let message = '';\n\n  if (!payload.useremail || !validator.isEmail(payload.useremail)) {\n    isFormValid = false;\n    errors.email = \"Please provide your valid email address.\";\n  }\n\n  if (!payload.password || payload.password.trim().length === 0) {\n    isFormValid = false;\n    errors.password = \"Please provide your password.\";\n  }\n\n  if (!isFormValid) {\n    message = \"Check the form for errors.\";\n  }\n\n  return {\n    success: isFormValid,\n    message: message,\n    errors: errors\n  };\n}\n\n\nmodule.exports = router;"]}