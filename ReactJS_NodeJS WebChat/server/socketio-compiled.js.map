{"version":3,"sources":["socketio.js"],"names":[],"mappings":";;AAAA;;;AAGA,IAAI,gBAAc,QAAQ,eAAR,CAAlB;;AAEA,IAAI,SAAS,IAAI,cAAc,MAAlB,CAA0B;AACnC,WAAO,CACH,uBADG;AAD4B,CAA1B,CAAb;;AAMA,OAAO,OAAP,CAAe,MAAf,CAAsB;AAClB,WAAO;AADW,CAAtB;;AAIA,OAAO,OAAP,CAAe,UAAf,CAA0B;AACtB,WAAO,UADe;AAEtB,UAAM,UAFgB;AAGtB,UAAM;AACF,oBAAY;AACR,kBAAM,EAAE,MAAM,QAAR,EADE;AAER,qBAAS,EAAE,MAAM,QAAR;AAFD;AADV;AAHgB,CAA1B;;AAWA,OAAO,OAAP,GAAiB,UAAU,IAAV,EAAgB;AAC7B,QAAM,KAAK,QAAQ,WAAR,EAAqB,IAArB,CAAX;;AAEA;AACA;AACA,QAAI,YAAY,EAAhB;;AAEJ;AACI,QAAI,QAAQ,CAAC,OAAD,EAAS,OAAT,EAAiB,OAAjB,CAAZ;;AAEA,OAAG,OAAH,CAAW,EAAX,CAAc,YAAd,EAA4B,UAAU,MAAV,EAAkB;;AAE1C;AACA,eAAO,EAAP,CAAU,SAAV,EAAqB,UAAU,IAAV,EAAgB;;AAEjC;AACA,mBAAO,IAAP,GAAc,IAAd;;AAEA;AACA,mBAAO,IAAP,CAAY,OAAO,IAAnB;AACA,oBAAQ,GAAR,CAAY,kBAAkB,IAA9B;AACH,SARD;;AAUA;AACA,eAAO,EAAP,CAAU,UAAV,EAAsB,UAAU,IAAV,EAAgB;AAClC;AACA,oBAAQ,GAAR,CAAY,cAAc,KAAK,SAAL,CAAe,IAAf,CAA1B;AACA,oBAAQ,GAAR,CAAY,KAAK,IAAjB;;AAEA,mBAAO,KAAP,CAAa;AACT,uBAAO,UADE;AAET,sBAAM,UAFG;AAGT,oBAAI,CAHK;AAIT,sBAAM;AACF,0BAAM,KAAK,IADT;AAEF,6BAAS,KAAK;AAFZ;AAJG,aAAb,EAQG,UAAU,GAAV,EAAe,IAAf,EAAqB;AACpB;AACA,oBAAG,GAAH,EACI;AACJ,wBAAQ,GAAR,CAAY,KAAK,SAAL,CAAe,IAAf,CAAZ;AACH,aAbD;;AAeA,oBAAQ,GAAR,CAAY,OAAO,OAAP,CAAe,KAA3B;AACA,mBAAO,SAAP,CAAiB,IAAjB,CAAsB,YAAtB,EAAoC,KAAK,OAAzC;AACH,SAtBD;AAwBH,KAtCD;AAuCH,CAjDD;;;;;;;;kCArBI,M","file":"socketio-compiled.js","sourcesContent":["/**\n * Created by zh355245849 on 2016/11/30.\n */\nvar elasticsearch=require('elasticsearch');\n\nvar client = new elasticsearch.Client( {\n    hosts: [\n        'http://localhost:9200'\n    ]\n});\n\nclient.indices.create({\n    index: \"messages\"\n});\n\nclient.indices.putMapping({\n    index: \"messages\",\n    type: \"document\",\n    body: {\n        properties: {\n            room: { type: \"string\" },\n            message: { type: \"string\" }\n        }\n    }\n});\n\nmodule.exports = function (http) {\n    const io = require('socket.io')(http)\n\n    // Listen for a connection\n    // usernames which are currently connected to the chat\n    var usernames = {};\n\n// rooms which are currently available in chat\n    var rooms = ['room1','room2','room3'];\n\n    io.sockets.on('connection', function (socket) {\n\n        // when the client emits 'adduser', this listens and executes\n        socket.on('adduser', function (room) {\n\n            // store the room name in the socket session for this client\n            socket.room = room;\n\n            // send client to room 1\n            socket.join(socket.room);\n            console.log(\"join room:   \" + room)\n        });\n\n        // when the client emits 'sendchat', this listens and executes\n        socket.on('sendchat', function (data) {\n            // we tell the client to execute 'updatechat' with 2 parameters\n            console.log(\"message  \" + JSON.stringify(data))\n            console.log(data.room)\n\n            client.index({\n                index: 'messages',\n                type: 'document',\n                id: 1,\n                body: {\n                    room: data.room,\n                    message: data.message\n                }\n            }, function (err, resp) {\n                // ...\n                if(err)\n                    return ;\n                console.log(JSON.stringify(resp))\n            });\n\n            console.log(socket.adapter.rooms);\n            socket.broadcast.emit('updatechat', data.message);\n        });\n\n    })\n}\n"]}